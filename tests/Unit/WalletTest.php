<?php

namespace Tests\Unit;

use App\Lib\Credit;
use App\Lib\Currency;
use App\Lib\WalletTypes;
use InvalidArgumentException;
use PHPUnit\Framework\TestCase;

/**
 * Class Wallet
 * @package Tests\Unit
 */
class WalletTest extends TestCase
{
    /**
     * @var \App\Lib\Wallet
     */
    private \App\Lib\Wallet $wallet;

    /**
     * @var Credit
     */
    private Credit $credit;

    /**
     * @var WalletTypes
     */
    private WalletTypes $type;

    /**
     * set up
     */
    public function setUp(): void
    {
        parent::setUp(); // TODO: Change the autogenerated stub
        $this->credit = new Credit(100, new Currency());
        $this->type = new WalletTypes(WalletTypes::PREPAID);
        $this->wallet = new \App\Lib\Wallet('test', $this->type, $this->credit);
    }

    /**
     * @test
     */
    public function should_add_balance()
    {
        //arrange
        $amount = 200;
        $currency = new Currency();

        //action
        $this->wallet->addBalance($amount, $currency);

        //assert
        $this->assertEquals($this->wallet->balance(), 300);
    }

    /**
     * @test
     */
    public function should_subtract_balance()
    {
        //arrange
        $amount = 50;
        $currency = new Currency();

        //action
        $this->wallet->subtractBalance($amount);

        //assert
        $this->assertEquals($this->wallet->balance(), 50);
    }

    /**
     * @test
     */
    public function should_not_add_gift_card_balance()
    {
        //assert
        $this->expectException(InvalidArgumentException::class);

        //arrange
        $amount = 50;
        $currency = new Currency();
        $credit = new Credit(100, $currency);
        $type = new WalletTypes(WalletTypes::GIFT);
        $wallet = new \App\Lib\Wallet('test', $type, $credit);

        //action
        $wallet->addBalance($amount, $currency);
    }

}
