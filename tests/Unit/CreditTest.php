<?php

namespace Tests\Unit;

use App\Exceptions\CurrencyMismatchException;
use App\Exceptions\NotEnoughCreditException;
use App\Lib\Credit;
use App\Lib\Currency;
use PHPUnit\Framework\TestCase;

/**
 * Class CreditTest
 * @package Tests\Unit
 */
class CreditTest extends TestCase
{
    /** @var Credit  */
    private Credit $credit;

    /**
     * set up
     */
    public function setUp(): void
    {
        parent::setUp(); // TODO: Change the autogenerated stub
        $this->credit = new Credit(0, new Currency());
    }

    /**
     * @test
     */
    public function does_not_add_different_currencies()
    {
        //assert
        $this->expectException(CurrencyMismatchException::class);

        //arrange
        $newCredit = new Credit(0, new Currency(Currency::EURO));

        //action
        $this->credit->add($newCredit);
    }

    /**
     * @test
     */
    public function add_same_currencies()
    {
        //arrange
        $newCredit = new Credit(0, new Currency(Currency::DOLLAR));

        //action
        $this->credit->add($newCredit);

        //assert
        $this->assertEquals($this->credit->amount(), 0);
    }

    /**
     * @test
     */
    public function does_not_add_non_integer_amount()
    {
        //assert
        $this->expectException(\TypeError::class);

        //arrange
        $newCredit = new Credit('test', new Currency(Currency::EURO));

        //action
        $this->credit->add($newCredit);
    }

    /**
     * @test
     */
    public function add_integer_amount()
    {
        //arrange
        $currencies = new Currency(Currency::EURO);
        $credit = new Credit(125, $currencies);
        $newCredit = new Credit(1000, $currencies);

        //action
        $credit = $credit->add($newCredit);

        //assert
        $this->assertEquals($credit->amount(), 1125);
    }

    /**
     * @test
     */
    public function does_not_subtract_different_currencies()
    {
        //assert
        $this->expectException(CurrencyMismatchException::class);

        //arrange
        $newCredit = new Credit(0, new Currency(Currency::EURO));

        //action
        $this->credit->subtract($newCredit);
    }

    /**
     * @test
     */
    public function does_not_subtract_non_integer_amount()
    {
        //assert
        $this->expectException(\TypeError::class);

        //arrange
        $newCredit = new Credit('test', new Currency(Currency::EURO));

        //action
        $this->credit->subtract($newCredit);
    }


    /**
     * @test
     */
    public function subtract_integer_amount()
    {
        //arrange
        $currencies = new Currency(Currency::EURO);
        $credit = new Credit(1125, $currencies);
        $newCredit = new Credit(1000, $currencies);

        //action
        $credit = $credit->subtract($newCredit);

        //assert
        $this->assertEquals($credit->amount(), 125);
    }

    /**
     * @test
     */
    public function does_not_subtract_more_balance()
    {
        //assert
        $this->expectException(NotEnoughCreditException::class);

        //arrange
        $currencies = new Currency(Currency::EURO);
        $credit = new Credit(1125, $currencies);
        $newCredit = new Credit(2000, $currencies);

        //action
        $credit->subtract($newCredit);
    }
}
